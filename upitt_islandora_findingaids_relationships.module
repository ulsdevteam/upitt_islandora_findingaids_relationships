<?php

/**
 * @file
 * Primary hook implementations.
 */

// Permissions.
define('UPITT_ISLANDORA_FINDINGAIDS_RELATIONSHIPS_MANAGE', 'manage isMemberOf finding aids');

/**
 * Implements hook_menu().
 */
function upitt_islandora_findingaids_relationships_menu() {
  $items = array(
    'admin/islandora/tools/findingaidrelationship' => array(
      'title' => 'Finding aid relationships EAD Settings',
      'description' => 'Configure the EAD settigs for the Finding Aid relationships module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_islandora_findingaids_relationships_admin_form'),
      'access arguments' => array(UPITT_ISLANDORA_FINDINGAIDS_RELATIONSHIPS_MANAGE),
      'file' => 'includes/admin.form.inc',
    ),
    'islandora/object/%islandora_object/manage/object/findingaidrelationship/add' => array(
      'title' => 'Add isMemberOf a Finding Aid object for this object',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_islandora_findingaids_relationships_add', 2),
      'type' => MENU_CALLBACK,
      'file' => 'includes/findingaidsobjects.form.inc',
      'access arguments' => array(UPITT_ISLANDORA_FINDINGAIDS_RELATIONSHIPS_MANAGE),
    ),
    'islandora/object/%islandora_object/manage/object/findingaidrelationship/%/remove' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_islandora_findingaids_relationships_remove',
        2, 6),
      'type' => MENU_CALLBACK,
      'file' => 'includes/findingaidsobjects.form.inc',
      'access arguments' => array(UPITT_ISLANDORA_FINDINGAIDS_RELATIONSHIPS_MANAGE),
    ),
    'islandora/object/%islandora_object/manage/object/findingaidrelationship/%/add' => array(
      'title' => 'Add isMemberOf a Finding Aid object for this object',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_islandora_findingaids_relationships_add', 2, 6),
      'type' => MENU_CALLBACK,
      'file' => 'includes/findingaidsobjects.form.inc',
      'access arguments' => array(UPITT_ISLANDORA_FINDINGAIDS_RELATIONSHIPS_MANAGE),
    ),
    // need a method to associate the finding aid object with all the objects in the related EAD
    'islandora_findingaids_relationships/findingaidsobjects' => array(
      'title' => 'Islandora Finding Aids Objects',
      'description' => 'Autocomplete callback to populate Finding Aid relationship dropdown.',
      'page callback' => '_islandora_findingaids_autocomplete',
      'access arguments' => array(UPITT_ISLANDORA_FINDINGAIDS_RELATIONSHIPS_MANAGE),
      'type' => MENU_CALLBACK,
    ),
    // This is to handle the download print labels spreadsheet
    'islandora/object/%islandora_object/manage/print_findingaid_labels' => array(
      'title' => 'Add isMemberOf a Finding Aid object for this object',
      'page callback' => 'upitt_islandora_findingaids_relationships_print_labels',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'file' => 'includes/print_labels.inc',
      'access arguments' => array(UPITT_ISLANDORA_FINDINGAIDS_RELATIONSHIPS_MANAGE),
    ),
  );

  return $items;
}

/**
 * Implements hook_islandora_overview_object_alter().
 *
 * Shows the collection usage stats on the object overview tab if allowed.
 */
function upitt_islandora_findingaids_relationships_islandora_overview_object_alter(AbstractObject &$object, &$output) {
  if (!user_access(UPITT_ISLANDORA_FINDINGAIDS_RELATIONSHIPS_MANAGE)) {
    return;
  }
  if (_is_findingaid($object->id)) {
    manage_findingaid_objects($object, $output);
  }
  else {
    manage_object_findingaid($object, $output);
  }
}


/**
 * to generate the output for the manage page for finding aids
 */
function manage_findingaid_objects(AbstractObject &$object, &$output) {
  // These are not necessarily contained in the EAD, but linked by the RELS_EXT isMemberOF relationship to this finding aid.
  $related_objects = findingaid_objects($object->id);

  $EAD_rows = array();
  // get all the objects that are currently related to this finding aid object.

  $ead_referenced_objects = findingaid_EAD_objects($object);
  $referenced_objects = array_merge($ead_referenced_objects, $related_objects);
  $related_count = 0;
  foreach ($referenced_objects as $child_object_pid => $child_rec_array) {
    $object_link = l($child_object_pid, "islandora/object/{$child_object_pid}");

    $child_object = islandora_object_load($child_object_pid);
    $related = FALSE;
    $exists = is_object($child_object);

    if (array_key_exists($child_object_pid, $related_objects) && array_key_exists('RELS_EXT_isMemberOf_uri_ms', $child_rec_array)) {
      $rels = $child_rec_array['RELS_EXT_isMemberOf_uri_ms'];
      //  $rels = $child_object->relationships->get(NULL, 'isMemberOf');
      $fedora_pid = 'info:fedora/' . $object->id;
      foreach ($rels as $rel) {
        $related |= ($rel == $fedora_pid);
        $obj_rel = $rel;
      }
    }
    $object_label = (array_key_exists('fgs_label_s', $child_rec_array)) ? $child_rec_array['fgs_label_s'] : (($exists) ? $child_object->label : 'unknown label');
    $object_link = ($exists) ? l($object_label, "islandora/object/{$child_object_pid}") : $child_object_pid;

    // if the object is related, display a remove link -- else display the add link
    $operation_links = array();
    if ($related) {
      $related_count++;
      // remove
      $operation_links[] = ($exists) ? l(t('Remove'), "islandora/object/{$child_object_pid}/manage/object/findingaidrelationship/{$object->id}/remove") :
        'object does not exist';
    }
    else {
      // add
      $operation_links[] = ($exists) ? l(t('Add'), "islandora/object/{$child_object_pid}/manage/object/findingaidrelationship/{$object->id}/add") :
        'object does not exist';
    }
    if ($exists) {
      $operation_links[] = l(t('Manage'), "islandora/object/{$child_object_pid}/manage", array('attributes' => array('target'=>'_blank')));
    }
    // if the PID is not found in the EAD, add this to indicate it is only manually related.
    if (!array_key_exists($child_object_pid, $ead_referenced_objects)) {
      $child_object_pid .= " (not referenced in EAD)";
    }
    $EAD_rows[] = array($object_link, $child_object_pid, implode(" | ", $operation_links));
  }
  if (count($ead_referenced_objects) < 1) {
    $EAD_rows[] = array('There are no barcodes in this EAD document', '', '');
  }
  $add_all = ($related_count < count($ead_referenced_objects)) ? theme_menu_local_action(array(
    'element' => array(
        '#link' => array(
          'href' => "islandora/object/{$object->id}/manage/object/findingaidrelationship/all/add",
          'title' => 'Add ALL object relationships for this finding aid',
        ),
      ),
    )) : '';

  $header = array('Related objects', 'OPERATIONS');
  $EAD_header = array('Title', 'PID', 'OPERATIONS');

  $print_labels_link = '<b>' . l('Download Print Labels', "islandora/object/{$object->id}/manage/print_findingaid_labels") . '</b>';

  $output['upitt_islandora_findingaids_relationships'] = array(
    '#type' => 'item',
    '#title' => 'Related objects',
    '#prefix' => $print_labels_link,
    '#markup' => $add_all . ((count($EAD_rows) > 0) ?
      theme('table', array('header' => $EAD_header, 'rows' => $EAD_rows)) : '')
  );
}

/**
 * to generate the output for the manage page for objects
 */
function manage_object_findingaid(AbstractObject &$object, &$output) {
  if (_is_linkable_to_findingaids($object)) {
    $obj_memberships = $object->relationships->get(NULL, 'isMemberOf');
    $rows = array();
    foreach ($obj_memberships as $obj_membership) {
      // only add the related object if it is a finding aid object
      if (_is_findingaid($obj_membership['object']['value'])) {
        if (isset($obj_membership['object']['value'])) {
          $findingaid_link = l($obj_membership['object']['value'], "islandora/object/{$obj_membership['object']['value']}");
          $findingaid_id = $obj_membership['object']['value'];
          $rows[] = array($findingaid_link, $findingaid_id,
            l(t('Remove'), "islandora/object/{$object->id}/manage/object/findingaidrelationship/{$obj_membership['object']['value']}/remove"),);
        }
      }
    }
    $header = array('Title', 'PID', 'OPERATIONS');
    $attributes = array();
    // Add isMemberOf to this object.
    $add_to_collection_link = ($object->id) ? array(
      'element' => array(
          '#link' => array(
            'href' => "islandora/object/{$object->id}/manage/object/findingaidrelationship/add",
            'title' => 'Add isMemberOf a Finding Aid object for this object',
          ),
        ),
      ) : array();

    $output['upitt_islandora_findingaids_relationships'] = array(
      '#type' => 'item',
      '#title' => 'Related Finding Aid',
      '#markup' => '<ul class="action-links">' .
      theme_menu_local_action($add_to_collection_link) .
      '</ul>' .
      ((count($rows) > 0) ?
        theme('table', array('header' => $header, 'rows' => $rows)) : ''),
    );
  }
}

/**
 * Implements hook_permission().
 */
function upitt_islandora_findingaids_relationships_permission() {
  return array(
    UPITT_ISLANDORA_FINDINGAIDS_RELATIONSHIPS_MANAGE => array(
      'title' => t('Manage Finding Aids relationships'),
      'description' => t('Manage isMemberOf Finding Aids relationships for objects in the repository.'),
    ),
  );
}

/**
 * Admin autocomplete callback which returns all possible Finding Aids objects via a Solr query.
 *
 * @param string $string
 *   String filled out in the autocomplete textfield.
 *
 * @return json
 *   A json array containing the finding aids values that contain the given string.
 */
function _islandora_findingaids_autocomplete($string = '') {
  if ($string) {
    $solr_query = format_string('!field:!value AND RELS_EXT_hasModel_uri_ms:info\:fedora\/islandora\:findingAidCModel', array(
                  '!field' => 'fgs_label_s',
                  '!value' => '*"' . urldecode($string) . '"*'
        ));
  }
  else {
    $solr_query = 'RELS_EXT_hasModel_uri_ms:info\:fedora\/islandora\:findingAidCModel';
  }
  $query_processor = new IslandoraSolrQueryProcessor();

  $query_processor->solrQuery = $solr_query;
  $query_processor->solrStart = 0;
  $query_processor->solrLimit = 9999;
  $query_processor->solrParams = array(
    'fl' => "PID,fgs_label_s",
    'fq' => variable_get('islandora_solr_base_filter', ''),
  );
  $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
  $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
  $solr->setCreateDocuments(FALSE);
  $result = array();
  try {
    $results = $solr->search($query_processor->solrQuery, $query_processor->solrStart, $query_processor->solrLimit, $query_processor->solrParams, 'GET');
    $tmp = json_decode($results->getRawResponse(), TRUE);
    $results = array();
    foreach ($tmp['response']['docs'] as $trip) {
      $term = $trip['fgs_label_s'];
      if (stripos($term, $string) !== FALSE) {
        // Search case insensitive, but keep the case on replace.
        $term_str = preg_replace("/$string/i", "<strong>\$0</strong>", $term);

        // Add strong elements to highlight the found string.
        $result[$trip['PID']] = $term_str;
      }
    }

    // Sort alphabetically.
    ksort($result);

    drupal_json_output($result);
    exit();
  }
  catch (Exception $e) {
    return array();
  }
}

/**
 * Helper function to determine whether or not an object in the system is a Finding Aid object.
 */
function _is_findingaid($pid) {
  $islandora_object = islandora_object_load($pid);
  $retval = FALSE;
  if ($islandora_object) {
    $retval = (!(array_search('islandora:findingAidCModel', $islandora_object->models) === FALSE));
  }
  return $retval;
}

/**
 * Helper function to determine whether or not the current object is linkable to a finding aid.
 * Currently, this is limited to several models, and may be adjusted here.
 */
function _is_linkable_to_findingaids($object) {
  $retval = FALSE;
  // allow bookCModel
  $retval |= (!(array_search('islandora:bookCModel', $object->models) === FALSE));
  // allow manuscriptCModel
  $retval |= (!(array_search('islandora:manuscriptCModel', $object->models) === FALSE));
  // allow images
  $retval |= (!(array_search('islandora:sp_large_image_cmodel', $object->models) === FALSE));
  $retval |= (!(array_search('islandora:sp_basic_image', $object->models) === FALSE));
  return $retval;
}

/**
 * Helper function to get a list of objects that are related to the given finding aid PID value by running
 * a Solr query.  This is different from the function that inspects the finding aid's EAD file for related
 * objects (barcodes).
 */
function findingaid_objects($pid) {
  $solr_query = format_string('RELS_EXT_isMemberOf_uri_ms:!value', array(
                '!value' => Apache_Solr_Service::escape('info:fedora/' . $pid)
      ));
  $query_processor = new IslandoraSolrQueryProcessor();

  $query_processor->solrQuery = $solr_query;
  $query_processor->solrStart = 0;
  $query_processor->solrLimit = 9999;
  $query_processor->solrParams = array(
    'fl' => "PID,fgs_label_s,RELS_EXT_isMemberOf_uri_ms,RELS_EXT_hasModel_uri_ms",
    'fq' => variable_get('islandora_solr_base_filter', ''),
  );
  $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
  $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
  $solr->setCreateDocuments(FALSE);
  $result = array();
  try {
    $results = $solr->search($query_processor->solrQuery, $query_processor->solrStart, $query_processor->solrLimit, $query_processor->solrParams, 'GET');
    $tmp = json_decode($results->getRawResponse(), TRUE);
    $results = array();
    foreach ($tmp['response']['docs'] as $trip) {
      $result[$trip['PID']] = $trip;
    }

    // Sort alphabetically.
    ksort($result);

    return $result;
  }
  catch (Exception $e) {
    return array();
  }
}

/**
 * Helper function that will inspect the EAD datastream of a given finding aid object.  The barcode values are returned after
 * prepending the islandora namespace prefix (upitt_islandora_findingaids_relationships_namespace_prefix - which is configured
 * here: admin/islandora/tools/findingaidrelationship.
 */
function findingaid_EAD_objects($object, $test_objects = FALSE) {
  // perform a transform on the EAD datastream to get the barcodes
  $EAD = isset($object['EAD']) ? $object['EAD'] : '';
  $EAD_content = ($EAD) ? $EAD->content : NULL;

  // use a DOM and the xpath = "//ead:dao/@xlink:href"
  $input = new DOMDocument();
  $input->loadXML($EAD_content);

  $xpath = new DOMXPath($input);
  $xpath->registerNamespace('xlink', 'http://www.w3.org/1999/xlink');
  $xpath_str = '//*[local-name()="dao"]/@xlink:href';
  $barcodes = $xpath->evaluate($xpath_str);

  $barcodes_arr = array();
  $namespace_prefix = rtrim(variable_get('upitt_islandora_findingaids_relationships_namespace_prefix', 'pitt:'), ':') . ':';
  foreach ($barcodes as $barcode) {
    $pid = $namespace_prefix . $barcode->nodeValue;
    if ($test_objects) {
      $object = islandora_object_load($pid);
      $add_this = is_object($object);
    }
    else {
      $add_this = true;
    }
    if ($add_this) {
      $barcodes_arr[$pid] = array('PID' => $pid);
    }
  }
  return $barcodes_arr;
}
